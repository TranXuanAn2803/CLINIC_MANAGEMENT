<div class="columns m-2">
  <div class="column">Tên: <span class="has-text-weight-semibold">{{ checkup.patient_patient.name }}</span></div>
  <div class="column">Ngày khám: <span class="has-text-weight-semibold">{{ checkup.date }}</span></div>
  <div class="column">Triệu chứng: <span class="has-text-weight-semibold">{{ checkup.symptoms }}</span></div>
</div>


<div class="m-2">
  <button class="button" id="load-data-button">Tải dữ liệu</button>
  <button class="button" id="select-all-button">Chọn tất cả</button>
  <button class="button" id="deselect-all-button">Bỏ chọn tất cả</button>
  <button class="button is-primary" id="create-button">Thêm</button>
  <button class="button is-info" id="modify-button" disabled>Cập nhật</button>
  <button class="button is-danger" id="delete-button">Xóa</button>
</div>

<div class="columns m-2">
  <div class="column is-three-fifths">
    <div id="medicine-table"></div>
  </div>
  <div class="column">
    <div id="disease-table"></div>
  </div>
</div>

<form id="confirm-modal" class="modal">
  <div class="modal-background"></div>
  <div class="modal-content box">
    <p class="is-size-4 has-text-centered has-text-weight-bold pb-3">Bạn có chắc muốn xóa</p>
    <div class="field is-grouped columns is-justify-content-center py-4">
      <div class="control">
        <button id="confirm-modal-confirm" class="button column is-link is-inline-flex" type="button">Xác
          nhận</button>
      </div>
      <div class="control">
        <button id="confirm-modal-close" class="button column is-link is-light is-inline-flex" type="button">Hủy
          bỏ</button>
      </div>
    </div>
  </div>
</form>

<form id="medicine-modify-modal" class="modal">
  <div class="modal-background"></div>

  <div class="modal-content box">

    <div class="field">
      <label class="label">Thuốc</label>
      <div class="control">
        <div class="select">
          <select id="medicine-modify-modal-medicine" name="medicine" required>
            {{#each medicines}}
            <option value={{this.id}}>{{this.name}}</option>
            {{/each}}
          </select>
        </div>
      </div>
    </div>

    <div class="field">
      <label class="label">Số lượng</label>
      <div class="control">
        <input id="medicine-modify-modal-number" , name="number" class="input" type="number" required>
      </div>
    </div>

    <div class="field is-grouped">
      <div class="control">
        <button id="medicine-modify-modal-confirm" class="button is-link" type="button">Cập nhập</button>
      </div>
      <div class="control">
        <button id="medicine-modify-modal-close" class="button is-link is-light" type="button">Hủy bỏ</button>
      </div>
    </div>
  </div>
</form>

<form id="disease-modify-modal" class="modal">
  <div class="modal-background"></div>

  <div class="modal-content box">
    <div class="field">
      <label class="label">Bệnh</label>
      <div class="control">
        <div class="select">
          <select id="disease-modify-modal-disease" name="disease" required>
            {{#each diseases}}
            <option value={{this.id}}>{{this.description}}</option>
            {{/each}}
          </select>
        </div>
      </div>
    </div>

    <div class="field is-grouped">
      <div class="control">
        <button id="disease-modify-modal-confirm" class="button is-link" type="button">Cập nhập</button>
      </div>
      <div class="control">
        <button id="disease-modify-modal-close" class="button is-link is-light" type="button">Hủy bỏ</button>
      </div>
    </div>
  </div>
</form>

<script>
    const medicineTable = new Tabulator("#medicine-table", {
    layout: "fitColumns",
    selectable: true,
    height: "88vh",
    selectableRangeMode: "click",
    placeholder: "Không có dữ liệu",
    columns: [
      { title: "id", field: "id", visible: false },
      { title: "STT", field: "STT", formatter: "rownum", width: 100 },
      { title: "Thuốc", field: "medicine_medicine", sorter: "string" },
      { title: "Số lượng", field: "number", sorter: "number" },
    ],
  });
  const diseaseTable = new Tabulator("#disease-table", {
    layout: "fitColumns",
    selectable: true,
    height: "88vh",
    selectableRangeMode: "click",
    placeholder: "Không có dữ liệu",
    columns: [
      { title: "id", field: "id", visible: false },
      { title: "STT", field: "STT", formatter: "rownum", width: 100 },
      { title: "Bệnh", field: "iddisease_disease", sorter: "string" },
    ],
  });
  let currentTable = medicineTable;
  const checkupid={{checkup.id}}
  const CHECKUP_MEDICINE_URL = "/api/fake/checkupMedicine/"+{{ checkup.id }};
  const CHECKUP_DISEASE_URL = "/api/fake/checkupDisease/"+{{ checkup.id }};
  let oldmedicine=0;
  let olddisease=0;

  const medicineModifyModal = $("#medicine-modify-modal");
  const diseaseModifyModal = $("#disease-modify-modal");
  const buttonsStatusChanger = function (data, rows) {
    modifyButton.disabled = data.length !== 1;
    deleteButton.disabled = data.length === 0;
  }
  medicineTable.on("rowSelectionChanged", (data, rows) => {
    if (currentTable !== medicineTable) {
      currentTable = medicineTable;
      diseaseTable.deselectRow();
    }
    buttonsStatusChanger(data, rows);
  });
  medicineTable.on("headerClick", (e, c) => {
    currentTable = medicineTable;
    medicineTable.deselectRow();
  });
  diseaseTable.on("rowSelectionChanged", (data, rows) => {
    if (currentTable !== diseaseTable) {
      currentTable = diseaseTable;
      medicineTable.deselectRow();
    }
    buttonsStatusChanger(data, rows);
  });
  diseaseTable.on("headerClick", () => {
    currentTable = diseaseTable;
    diseaseTable.deselectRow();
  });
  $("#load-data-button").onclick = function () {
    if (currentTable === medicineTable) {
      medicineTable.setData(CHECKUP_MEDICINE_URL);
    } else {
      diseaseTable.setData(CHECKUP_DISEASE_URL);
    }
  };
  $("#select-all-button").onclick = function () { currentTable.selectRow(); };
  $("#deselect-all-button").onclick = function () { currentTable.deselectRow(); }
  const modifyButton = $("#modify-button");
  const deleteButton = $("#delete-button");
  const confirmFormModal = $("#confirm-modal");
  let isCreate = false;
  $("#create-button").onclick = function () {
    isCreate = true;
    (currentTable === medicineTable ? medicineModifyModal : diseaseModifyModal).classList.add("is-active");
  };
  modifyButton.onclick = function () {
    isCreate = false;
    const row = currentTable.getSelectedData()[0];
    if (currentTable === medicineTable) {
      $("#medicine-modify-modal-medicine").value = row.medicine;
      $("#medicine-modify-modal-number").value = row.number;
      oldmedicine=row.medicine
      medicineModifyModal.classList.add('is-active');
    } else {
      $("#disease-modify-modal-disease").value = row.iddisease;
      olddisease=row.iddisease
      diseaseModifyModal.classList.add('is-active');
    }
  };
  deleteButton.onclick = function () { confirmFormModal.classList.add("is-active"); };
  $("#medicine-modify-modal-close").onclick = function () { medicineModifyModal.classList.remove("is-active");      
   medicineModifyModal.classList.remove("is-danger");
}

  $("#medicine-modify-modal-confirm").onclick = function () {
    const medicine = $("#medicine-modify-modal-medicine").value;
    const number = parseInt($("#medicine-modify-modal-number").value) || -1;
    const hasError=false
    if (medicine.length === 0) {
      medicineModifyModal.classList.add("is-danger");
      hasError = true;
    }
    else
    {
      medicineModifyModal.classList.remove("is-danger");

    }
    const checkupMedicine={
      checkup: checkupid,
      medicine: medicine,
      number: number  
    }
    if (hasError)
    {
      return
    }
    if (isCreate) {
      fetch('/checkup/checkupMedicine/add', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json', },
        body: JSON.stringify(checkupMedicine),
      })
        .then(response => { response.json(); })
        .then(data => { console.log('Success:', data); })
        .catch((error) => { console.error('Error:', error); });


    } else {
      checkupMedicine.oldmedicine=oldmedicine
      fetch('/checkup/checkupMedicine/edit', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json', },
        body: JSON.stringify(checkupMedicine),
      })
        .then(response => { response.json(); })
        .then(data => { console.log('Success:', data); })
        .catch((error) => { console.error('Error:', error); });

    }
        setTimeout(function(){
    medicineTable.setData(CHECKUP_MEDICINE_URL);
    }, 2000);  

    formModal.reset()
    medicineModifyModal.classList.remove("is-active");
  }
  $("#disease-modify-modal-confirm").onclick = function () {
    const disease = $("#disease-modify-modal-disease").value;
    const checkupDisease={
      idcheckup: checkupid,
      iddisease: disease
    }
    const hasError=false
    if (medicine.length === 0) {
      diseaseModifyModal.classList.add("is-danger");
      hasError = true;
    }
    else
    {
      diseaseModifyModal.classList.remove("is-danger");

    }
    if(hasError)
    {
      return
    }

    if (isCreate) {
      fetch('/checkup/checkupDisease/add', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json', },
        body: JSON.stringify(checkupDisease),
      })
        .then(response => { response.json(); })
        .then(data => { console.log('Success:', data); })
        .catch((error) => { console.error('Error:', error); });

    } else {
      checkupDisease.olddisease=olddisease
      console.log(olddisease)
      fetch('/checkup/checkupDisease/edit', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json', },
        body: JSON.stringify(checkupDisease),
      })
        .then(response => { response.json(); })
        .then(data => { console.log('Success:', data); })
        .catch((error) => { console.error('Error:', error); });

    }
    diseaseModifyModal.classList.remove("is-active");
    setTimeout(function(){
    diseaseTable.setData(CHECKUP_DISEASE_URL);
    }, 2000);  
    diseaseTable.deselectRow();
    diseaseModifyModal.reset()
  }
  const onConfirmModalConfirmButtonClicked = (currentTable) => {
    if (currentTable === diseaseTable) {
    fetch('/checkup/checkupDisease/delete', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json', },
      body: JSON.stringify(currentTable.getSelectedData()),
    })
      .then(response => { response.json(); })
      .then(data => { console.log('Success:', data); })
      .catch((error) => { console.error('Error:', error); });
  setTimeout(function(){
    diseaseTable.setData(CHECKUP_DISEASE_URL);    
    }, 2000);  

      

    } else {
    fetch('/checkup/checkupMedicine/delete', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json', },
      body: JSON.stringify(currentTable.getSelectedData()),
    })
      .then(response => { response.json(); })
      .then(data => { console.log('Success:', data); })
      .catch((error) => { console.error('Error:', error); });
  setTimeout(function(){
    medicineTable.setData(CHECKUP_MEDICINE_URL);    
    }, 2000);     }
  }

  $("#disease-modify-modal-close").onclick = function () { diseaseModifyModal.classList.remove("is-active"); }
  $("#confirm-modal-close").onclick = function () { confirmFormModal.classList.remove("is-active") }
  $("#confirm-modal-confirm").onclick = function (e) {
    e.preventDefault();
    confirmFormModal.classList.remove("is-active");
    onConfirmModalConfirmButtonClicked(currentTable);
    currentTable.deselectRow();
  }
</script>